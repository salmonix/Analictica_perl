package Export::Decorators::HTML;

use feature ":5.10";
use strict;
use utf8;
use Carp;

our $VERSION='';

=pod

=head1 NAME

 Export::Decorator::HTML - a simple HTML decorator. 

=head1 DESCRIPTION

 Returns the received string wrapped in some colour html code.
 The module uses HTML tags, not CSS.

=head1 METHODS

=over 4

=item - I<new>

 Constructor. May take a HASH of colors.

=cut 

my ($puf,$ret);
sub new {
	if ( $_[1] ) {
		if ( ref $_[1] eq 'HASH' ) {
			return bless { colors => $_[1] },__PACKAGE__;
		} else {
			croak "USAGE: new( HASH_of_COLORS ) not $_[1]";
		}
	}
	return bless { _hidden => '<font color="#DFDFDF">##</font>',
			'st' => '<em>##</em>',
			'em' => '<strong>##</strong>',
			'u' => '<u>##</u>',
			green => '<font color="#03c01d">##</font>',
			},__PACKAGE__;
}

=item - I<colors( $HASH )>

 Sets the colors to use.

=cut

sub colors {
	if ( $_[1] and ref $_[1] eq 'HASH' ) {
		$_[0]->{colors} = $_[1];
		return 1;
	};
	croak "USAGE: colors( HASH_of_COLORS ) not $_[1]";
}

=item - I<decorate( $string,$color,@attributes )>

 Decorates the string with color and other predefined attributes.

=cut

sub decorate {
	my ($self,$string,$color,@attrs)=@_;
	$puf=$self->{$color};
	$puf=~s/##/$string/;
	$ret=$puf;
	if ( @attrs ) {
		map {
			$puf=$self->{$_};
			$puf=~s/##/$ret/;
			$ret=$puf;
		} @attrs;
	}
	return $ret;

}

=item - I<decorate_hidden( $string )>

 Decorates the string with hidden color.

=cut

sub decorate_hidden {
	$puf=$_[0]->{_hidden};
	$puf=~s/##/$_[1]/;
	return $puf;
}

=item - I<header>

 Returns the header. It may take a string and makes it a headline.

=cut

sub header {
	my $header=<<HEADER
<html>
<head><title>Text generated by Analictica</title></head>
<body bgcolor="#FFFFFF">
HEADER
;
	if ( $_[1] ) {
		$header.="<h2>$_[1]<h2><br>";
	};
	return $header;
}

sub newline {
	return '<br>';
}

sub footer {
	return "</body></html>";
}
1;

__END__
=pod

=back

=head1 BUGS, WARNINGS and TODO
